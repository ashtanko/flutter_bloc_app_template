// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_bloc_app_template/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter/src/widgets/navigator.dart' as _i8;
import 'package:flutter_bloc_app_template/index.dart' as _i2;
import 'package:flutter_bloc_app_template/models/core/core_resource.dart'
    as _i3;
import 'package:flutter_bloc_app_template/models/email.dart' as _i5;
import 'package:flutter_bloc_app_template/repository/cores_repository.dart'
    as _i7;
import 'package:flutter_bloc_app_template/repository/rocket_repository.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLaunchFullResource_0 extends _i1.SmartFake
    implements _i2.LaunchFullResource {
  _FakeLaunchFullResource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRocketResource_1 extends _i1.SmartFake
    implements _i2.RocketResource {
  _FakeRocketResource_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCoreResource_2 extends _i1.SmartFake implements _i3.CoreResource {
  _FakeCoreResource_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [EmailListRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockEmailListRepository extends _i1.Mock
    implements _i2.EmailListRepository {
  MockEmailListRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.Email>> loadData() => (super.noSuchMethod(
        Invocation.method(
          #loadData,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Email>>.value(<_i5.Email>[]),
      ) as _i4.Future<List<_i5.Email>>);
}

/// A class which mocks [LaunchesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLaunchesRepository extends _i1.Mock
    implements _i2.LaunchesRepository {
  MockLaunchesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.LaunchResource>> getLaunches({
    bool? hasId = true,
    int? limit,
    int? offset,
    int? launchYear,
    int? launchSuccess,
    String? order,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLaunches,
          [],
          {
            #hasId: hasId,
            #limit: limit,
            #offset: offset,
            #launchYear: launchYear,
            #launchSuccess: launchSuccess,
            #order: order,
          },
        ),
        returnValue:
            _i4.Future<List<_i2.LaunchResource>>.value(<_i2.LaunchResource>[]),
      ) as _i4.Future<List<_i2.LaunchResource>>);

  @override
  _i4.Future<_i2.LaunchFullResource> getLaunch(int? flightNumber) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLaunch,
          [flightNumber],
        ),
        returnValue:
            _i4.Future<_i2.LaunchFullResource>.value(_FakeLaunchFullResource_0(
          this,
          Invocation.method(
            #getLaunch,
            [flightNumber],
          ),
        )),
      ) as _i4.Future<_i2.LaunchFullResource>);
}

/// A class which mocks [RocketRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRocketRepository extends _i1.Mock implements _i6.RocketRepository {
  MockRocketRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.RocketResource>> getRockets({
    bool? hasId = true,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRockets,
          [],
          {
            #hasId: hasId,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue:
            _i4.Future<List<_i2.RocketResource>>.value(<_i2.RocketResource>[]),
      ) as _i4.Future<List<_i2.RocketResource>>);

  @override
  _i4.Future<_i2.RocketResource> getRocket(String? rocketId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRocket,
          [rocketId],
        ),
        returnValue: _i4.Future<_i2.RocketResource>.value(_FakeRocketResource_1(
          this,
          Invocation.method(
            #getRocket,
            [rocketId],
          ),
        )),
      ) as _i4.Future<_i2.RocketResource>);
}

/// A class which mocks [CoresRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoresRepository extends _i1.Mock implements _i7.CoresRepository {
  MockCoresRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i3.CoreResource>> getCores({
    bool? hasId = true,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCores,
          [],
          {
            #hasId: hasId,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue:
            _i4.Future<List<_i3.CoreResource>>.value(<_i3.CoreResource>[]),
      ) as _i4.Future<List<_i3.CoreResource>>);

  @override
  _i4.Future<_i3.CoreResource> getCore(String? coreSerial) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCore,
          [coreSerial],
        ),
        returnValue: _i4.Future<_i3.CoreResource>.value(_FakeCoreResource_2(
          this,
          Invocation.method(
            #getCore,
            [coreSerial],
          ),
        )),
      ) as _i4.Future<_i3.CoreResource>);
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i8.NavigatorObserver {
  @override
  void didPush(
    _i8.Route<dynamic>? route,
    _i8.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPush,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didPop(
    _i8.Route<dynamic>? route,
    _i8.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPop,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didRemove(
    _i8.Route<dynamic>? route,
    _i8.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didRemove,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didReplace({
    _i8.Route<dynamic>? newRoute,
    _i8.Route<dynamic>? oldRoute,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #didReplace,
          [],
          {
            #newRoute: newRoute,
            #oldRoute: oldRoute,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didChangeTop(
    _i8.Route<dynamic>? topRoute,
    _i8.Route<dynamic>? previousTopRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didChangeTop,
          [
            topRoute,
            previousTopRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didStartUserGesture(
    _i8.Route<dynamic>? route,
    _i8.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didStartUserGesture,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didStopUserGesture() => super.noSuchMethod(
        Invocation.method(
          #didStopUserGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
